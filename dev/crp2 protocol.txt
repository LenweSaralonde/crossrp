Cross RP 2 Protocol
-------------------------------------------------------------------------------
Doesn't use communities. Relies on Battle.net addon whispers.

Each realm has an ingame channel, `crossrp`, the broadcast channel.

When a person connects, they join the `crossrp` channel, and then tell their
 Battle.net friends who are actively playing characters on the opposite
 faction. If any of them are also connected, then they can establish a 
 cross-faction Bridge.

One client can only make a bridge with one other client.

Bridges periodically broadcast their status, which should include what
 destinations players can connect to through them. When a player wants to send
 data across factions, they choose a bridge randomly (to scatter their requests
 evenly across all bridges). The more bridges there are, the more healthy the
 cross-faction connection will be.

Not everyone needs to have a Bnet friend on the opposing faction, but the more
 there are, the healthier the connection will be, as there need to be a
 sufficient amount to handle the total traffic, especially in more crowded
 settings.
-------------------------------------------------------------------------------
Technical hurdles to overcome:
-------------------------------------------------------------------------------
Latency will be high, especially if you are using two middlemen:

 Player -> Ally Volunteer -> Horde Volunteer -> Broadcast Channel
 
This can be reduced if you have the cross-faction volunteer as a Bnet friend,
 omitting one middleman. However, that needs to be managed carefully, because
 the load needs to be shared across multiple bridges, not focused on one.
-------------------------------------------------------------------------------
Broadcast bandwidth is extremely limited. Ten messages per ten seconds. Large
 profiles will clog this limit easily. Maybe 5 clients per bridge allowed.
 
 Each user probably sends only a 
 
=========================

  THE ALLIANCE PROTOCOL

=========================

Everyone joins the `crossrp` channel.
Broadcast to Battle.net friends on different BANDS than yourself that you are
 a Cross RP user.
"BAND" is unique by faction+realm. e.g. WRA-A is a different band than WRA-H.
While Cross RP is "active", bandwidth allocation is higher.
When "inactive", you still offer some of your bandwidth.
Disabled in instances. Disabled when you experience high latency (as you're a
 risky medium). Disabled in combat.
 

Transfers of profile bits directly from the source should be logged.
Transfers of profile bits through relays should not be logged.

-------------------------------------------------------------------------------
PROFILE TRANSFER PROTOCOL:

If profile version is not known:
 Upon "touch" make a cross request to them and get their profile version.
 This is a private request.
 When a player changes their profile, they make a cross-broadcast request
 to give everyone their version numbers on the other sides. Otherwise it's
 a private exchange.
For each missing part, make a cross request and the opposite node asks
 for cross rp data.
 
-----------------------------------------------

[BROADCAST] status message:
ST <band+load> ...
ST -

e.g. ST 1H1 2H25 2A77

<bands>: space separated list of bands they can reach
if the mesasge is "ST -" then this means they are shutting down.
format for each band is <band><load>, load is an average of all loads for
their links.

[BNET] probe message:
HI

used to test if people are crossrp users
this is a "connect" message to make a link

[BNET] disconnect message:
BYE

severs a link with a bnet friend

[BNET] link/status message:
HO <load>

replied to HI and given periodically to active links.
load: number of links they have, used for load balancing

[WHISPER] stage 1 relay
R1 <destination> <message>

first step of message relaying, the receiver needs to pass this message
(as "R2") to a suitable band target. <destination> is where the message should
end up. <message> is the payload and may contain sub protocols.

R1 may be skipped if user owns a link themselves, as they can pick themselves
as the R1 target.

[BNET] stage 2 relay
R2 <source> <destination> <message>

second step of message relaying, crossing the faction/realm divide. bnet messages
can be longer than 255 bytes so you dont need to worry about length.

[WHISPER] stage 3 relay
R3 <source> <message>

[BROADCAST] stage 3 relay (broadcast)
R3 <source> <message>
 
==================

LINKING RAIDS

==================
 
raid leader shares message regarding destinations of linked raids

###############################################################################

events:
BAND added (when touching someone on a different destination)
BAND removed (from lack of touch)

LINKED (when linked with a 
UNLINKED (when your link logs off or 

"touching":
this occurs when a person from a different band is touched by mouseover,
 targeted, or you hear them emote

 ==========================================================================
 next draft
 
 commands:
 
DIRECT ROUTE
R0 <MESSAGE>

we split up the routing message types to deter abuse.

ROUTING CHECKPOINT 1
R1 <UMID> <SOURCEFACTION> <DESTINATION> <MESSAGE>
R1 W3e0d12 H Tammya1A RP1 Hello!

ROUTING CHECKPOINT 2
R2 <UMID> <SOURCE> <DESTINATION> <MESSAGE>
R2 W3e0d12 Catnia1H Tammya1A RP1 Hello!

ROUTING CHECKPOINT 3
R3 <SOURCE> <MESSAGE>
R3 Catnia1H RP1 Hello!

ACKNOWLEDGEMENT:
          500ms         500ms        500ms
source --WHISPER-> R1 --BNET-> R2 --WHISPER-> R3
   '----- A3 <-ADDON-- A2 <-BNET-- A1 <-'
                500ms       500ms
A1 <UMID> <DESTINATION>
A2 <UMID> <DESTINATION>
A3 <UMID>

make sure that ack is put out on the line AFTER R3

-----------------------------------------------------------------
LOWER LAYER:

version=1

ADDON
1<[2 BYTE SLOT][DATA START]
1=[2 BYTE SLOT][DATA CONT.]
1>[2 BYTE SLOT][DATA CONT.]
1-[ENTIRE DATA]

BNET
1<[2 BYTE SLOT][2 BYTE "1"][DATA START]
1=[2 BYTE SLOT][2 BYTE PAGE][DATA CONT.]
1>[2 BYTE SLOT][2 BYTE PAGE TOTAL][DATA CONT.]
1-[ENTIRE DATA]

---------------------------------------------
PROTO STARTUP PROCEDURE:

JOIN GAME CHANNEL
INITIALIZATION CALLBACK 1 (for things to set secure state, etc)
SEND PROBES ( THESE ARE HI MESSAGES WITH 0 LOAD AND REQUEST SET )
WAIT 2.5 SECONDS FOR PROBE RESPONSES
ENABLE HOSTING IF LATENCY IS OKAY
INITIALIZATION CALLBACK 2 (for things to set any other settings before the status broadcast)
BROADCAST STATUS W/ REQUEST (AND PING LINKS IF HOSTING)
WAIT 3.0 SECONDS FOR STATUS RESPONSES
INITIALIZATION CALLBACK 3 (for things to send data with bridges acquired)
START UPDATE LOOP

---------------------------------------------------------------
profile transferring

on "touch" send REQUEST

REQUEST CONTAINS:
  last known vernums of them
  which bits of profile you want to update
if they dont respond, youre up to date or the packet was lost
you can only send one of these per player per profile bit every 30 seconds
requests can also be paired up

request format:
TR [SLOT] [PROFILE_ID] [A SERIAL]:[B SERIAL]:[C SERIAL]:[D SERIAL]

SLOT is a firewall slot that was opened for a response
PROFILE_ID is the trp profile id, escaped to not have certain special characters
serial may be "?", which means the user doesnt have it, or empty (no space, nothing),
 meaning the user isnt making a request for that
 
response format:
TD [SLOT] [TYPE] [PROFILE_ID] [data...]

[SLOT] is the value received from TR
[TYPE] is "A" "B" "C" or "D", for which profile bit is being given
[PROFILE_ID] is the user's current profile id, if this is different then what the receiver knows about them
               then they need to register it as a new profile
[data...] is the chunk of trp profile data (serialized table), 
           and notably, this contains the `v` version value for this bit
	   